#AUTOGENERATED! DO NOT EDIT! File to edit: dev/10_segmentation_dataset.ipynb (unless otherwise specified).

__all__ = ['SemanticSegmentationData']

#Cell
from fastai.vision import *

#Cell
class SemanticSegmentationData:
    "Creates semantic segmentation dataset from fastai datablock API"
    def __init__(self, PATH, IMAGES, MASKS, CODES, TRAIN, VALID, TEST,
                     sample_size, bs, size, has_test_labels=True, **dl_kwargs):
        # input params
        self.path, self.sample_size, self.bs, self.size, self.has_test_labels  = \
        PATH, sample_size, bs, size, has_test_labels
        self.codes, self.VALID, self.TEST = \
        np.loadtxt(self.path/CODES, dtype=str), VALID, TEST
        self.dl_kwargs = dl_kwargs

        # read training
        self.train_df = pd.read_csv(self.path/TRAIN, header=None)
        if sample_size:
            self.train_df = self.train_df.sample(sample_size)

        # read validation and test
        if (VALID is not None) and (type(VALID) is str):
            self.valid_file = True
        else:
            self.valid_file = False
        if self.valid_file: self.valid_df = pd.read_csv(self.path/VALID, header=None)
        if TEST is not None: self.test_df = pd.read_csv(self.path/TEST, header=None)

        # image and mask folders
        self.path_img, self.path_lbl = self.path/IMAGES, self.path/MASKS

    def get_y_fn(self, x):
        return self.path_lbl/f'{Path(x).stem}.png'

    def get_data(self):
        if self.valid_file:
            self.train_valid_df = pd.concat([self.train_df, self.valid_df])
            self.train_valid_df.columns = ["images"]
            self.train_valid_df["is_valid"] = len(self.train_df)*[False] + len(self.valid_df)*[True]
        else:
            self.train_valid_df = self.train_df

        # get
        il = SegmentationItemList.from_df(self.train_valid_df, self.path_img)
        # split
        if self.valid_file: ill = il.split_from_df("is_valid")
        else: ill = il.split_by_rand_pct(ifnone(self.VALID, 0.2))
        # label
        ll = ill.label_from_func(self.get_y_fn, classes=self.codes)
        # databunch
        data = (ll.transform(get_transforms(),
                             size=self.size,
                             tfm_y=True,
                             resize_method=ResizeMethod.SQUISH)
                    .databunch(bs=self.bs, **self.dl_kwargs))
        # test
        if self.TEST:
            il = SegmentationItemList.from_df(self.test_df, self.path_img) # get
            data.add_test(il, tfm_y=False)
        return data

    def __repr__(self):
        return f"""___repr__"""

    def __str__(self):
        return f"""___str___"""