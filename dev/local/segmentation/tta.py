#AUTOGENERATED! DO NOT EDIT! File to edit: dev/15_segmentation_tta.ipynb (unless otherwise specified).

__all__ = ['flip_ud']

#Cell
from fastai.vision import *

#Cell
def _flip_ud(x):
    "Flip `x` vertically."
    if isinstance(x, ImagePoints):
        x.flow.flow[...,1] *= -1
        return x
    return tensor(np.ascontiguousarray(np.array(x)[:,::-1].copy()))
flip_ud = TfmPixel(_flip_ud)

#Cell
from fastai.basic_train import _loss_func2activ
def _seg_tta_only_v1(learn:Learner, ds_type:DatasetType=DatasetType.Valid) -> Iterator[List[Tensor]]:
    "Computes the outputs for non-flip and flip_lr augmented inputs"
    dl = learn.dl(ds_type)
    ds = dl.dataset
    old = ds.tfms
    try:
        pbar = master_bar(range(2))
        for i in pbar:
            tfm = [] # to remove random crop resize aug
            if i: tfm.append(flip_lr(p=1.))
            ds.tfms = tfm
            yield get_preds(learn.model, dl, pbar=pbar, activ=_loss_func2activ(learn.loss_func))[0]
    finally: ds.tfms = old

Learner.seg_tta_only_v1 = _seg_tta_only_v1

#Cell
def _seg_tta_only_v2(learn:Learner, ds_type:DatasetType=DatasetType.Valid) -> Iterator[List[Tensor]]:
    "Computes the outputs for non-flip, flip_lr and flip_ud augmented inputs"
    dl = learn.dl(ds_type)
    ds = dl.dataset
    old = ds.tfms
    try:
        pbar = master_bar(range(3))
        for i in pbar:
            tfm = [] # to remove random crop resize aug
            if i == 1: tfm.append(flip_lr(p=1.))
            elif i == 2: tfm.append(flip_ud(p=1.))
            ds.tfms = tfm
            yield get_preds(learn.model, dl, pbar=pbar, activ=_loss_func2activ(learn.loss_func))[0]
    finally: ds.tfms = old

Learner.seg_tta_only_v2 = _seg_tta_only_v2

#Cell
def _seg_TTA(learn:Learner, ds_type=DatasetType.Valid, updown=False):
    "Takes average of original, flip_lr and/or flip_ud"
    if not updown:
        orig_preds, flip_lr_preds = list(learn.seg_tta_only_v1(ds_type))
        flip_lr_preds = torch.stack([torch.flip(o, dims=[-1]) for o in flip_lr_preds], dim=0)
        avg_preds = (orig_preds + flip_lr_preds) / 2
    else:
        orig_preds, flip_lr_preds, flip_ud_preds = list(learn.seg_tta_only_v2(ds_type))
        flip_lr_preds = torch.stack([torch.flip(o, dims=[-1]) for o in flip_lr_preds], dim=0)
        flip_ud_preds = torch.stack([torch.flip(o, dims=[-2]) for o in flip_ud_preds], dim=0)
        avg_preds = (orig_preds + flip_lr_preds + flip_ud_preds) / 3
    return avg_preds

Learner.segTTA = _seg_TTA