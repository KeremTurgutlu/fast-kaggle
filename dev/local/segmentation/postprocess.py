#AUTOGENERATED! DO NOT EDIT! File to edit: dev/14_segmentation_postprocess.ipynb (unless otherwise specified).

__all__ = ['remove_small_regions', 'search_best_minsize']

#Cell
from fastai.vision import *

#Cell
from skimage.morphology import label

def remove_small_regions(mask, min_pixel_size):
    "remove small mask regions, artifacts from a mask"
    mask = mask.copy()
    connected_labels = label(mask)
    unique_labels = np.unique(connected_labels)
    for l in unique_labels:
        region_mask = connected_labels == l
        pixel_size = np.sum(region_mask)
        if pixel_size < min_pixel_size: mask[region_mask] = 0
    return mask

#Cell
def search_best_minsize(sizes:list, preds:Tensor, targs:Tensor, metric:Callable)->Tuple[int, float]:
    "search for best minimum size threshold given a metric and list of sizes"
    best_score, best_size = -np.inf, None
    preds = to_np(preds)
    for size in sizes:
        post_preds = tensor(np.stack([remove_small_regions(o, size) for o in preds]))
        score = metric(post_preds, targs).item()
        if score > best_score: best_score, best_size  = score, size
    return (best_size, best_score)